# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!

import sys
import os
# 根据当前文件路径将包路径纳入，在非安装的情况下可以引用到
sys.path.append(os.path.abspath(os.path.join(
    os.path.dirname(__file__), os.path.pardir, os.path.pardir)))
import HiveNetLib.deps_tool as deps_tool
try:
    import grpc
except ImportError:
    deps_tool.install_package('grpcio')
    import grpc
import HiveNetLib.simple_grpc.msg_pb2 as msg__pb2


class SimpleGRpcServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

        Args:
          channel: A grpc.Channel.
        """
        self.GRpcCallSimple = channel.unary_unary(
            '/simpleGRpc.SimpleGRpcService/GRpcCallSimple',
            request_serializer=msg__pb2.RpcRequest.SerializeToString,
            response_deserializer=msg__pb2.RpcResponse.FromString,
        )
        self.GRpcCallClientSideStream = channel.stream_unary(
            '/simpleGRpc.SimpleGRpcService/GRpcCallClientSideStream',
            request_serializer=msg__pb2.RpcRequest.SerializeToString,
            response_deserializer=msg__pb2.RpcResponse.FromString,
        )
        self.GRpcCallServerSideStream = channel.unary_stream(
            '/simpleGRpc.SimpleGRpcService/GRpcCallServerSideStream',
            request_serializer=msg__pb2.RpcRequest.SerializeToString,
            response_deserializer=msg__pb2.RpcResponse.FromString,
        )
        self.GRpcCallBidirectionalStream = channel.stream_stream(
            '/simpleGRpc.SimpleGRpcService/GRpcCallBidirectionalStream',
            request_serializer=msg__pb2.RpcRequest.SerializeToString,
            response_deserializer=msg__pb2.RpcResponse.FromString,
        )
        self.GRpcCallHealthCheck = channel.unary_unary(
            '/simpleGRpc.SimpleGRpcService/GRpcCallHealthCheck',
            request_serializer=msg__pb2.HealthRequest.SerializeToString,
            response_deserializer=msg__pb2.HealthResponse.FromString,
        )


class SimpleGRpcServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GRpcCallSimple(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallClientSideStream(self, request_iterator, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallServerSideStream(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallBidirectionalStream(self, request_iterator, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallHealthCheck(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleGRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GRpcCallSimple': grpc.unary_unary_rpc_method_handler(
            servicer.GRpcCallSimple,
            request_deserializer=msg__pb2.RpcRequest.FromString,
            response_serializer=msg__pb2.RpcResponse.SerializeToString,
        ),
        'GRpcCallClientSideStream': grpc.stream_unary_rpc_method_handler(
            servicer.GRpcCallClientSideStream,
            request_deserializer=msg__pb2.RpcRequest.FromString,
            response_serializer=msg__pb2.RpcResponse.SerializeToString,
        ),
        'GRpcCallServerSideStream': grpc.unary_stream_rpc_method_handler(
            servicer.GRpcCallServerSideStream,
            request_deserializer=msg__pb2.RpcRequest.FromString,
            response_serializer=msg__pb2.RpcResponse.SerializeToString,
        ),
        'GRpcCallBidirectionalStream': grpc.stream_stream_rpc_method_handler(
            servicer.GRpcCallBidirectionalStream,
            request_deserializer=msg__pb2.RpcRequest.FromString,
            response_serializer=msg__pb2.RpcResponse.SerializeToString,
        ),
        'GRpcCallHealthCheck': grpc.unary_unary_rpc_method_handler(
            servicer.GRpcCallHealthCheck,
            request_deserializer=msg__pb2.HealthRequest.FromString,
            response_serializer=msg__pb2.HealthResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'simpleGRpc.SimpleGRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
